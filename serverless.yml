service: laravel

provider:
  name: aws
  # The AWS region in which to deploy (us-east-1 is the default)
  region: us-east-1
  # The stage of the application, e.g. dev, production, stagingâ€¦ ('dev' is the default)
  stage: dev
  runtime: provided
  environment:
    APP_URL: https://dah75vyqe3qge.cloudfront.net/
    DB_HOST: ${ssm:/shop-i-prod-db-write-host~true}
    DB_PORT: ${ssm:/shop-i-prod-db-port}
    DB_DATABASE: ${ssm:/shop-i-prod-db-name~true}
    DB_USERNAME: ${ssm:/shop-i-prod-db-user~true}
    DB_PASSWORD: ${ssm:/shop-i-prod-db-password~true}
    WEB_CLIENT_ID: ${ssm:/shop-i-prod-web-client-id~true}
    WEB_CLIENT_SECRET: ${ssm:/shop-i-prod-web-client-secret~true}
    FILESYSTEM_DRIVER: s3
    FILESYSTEM_PUBLIC_IMAGES_DISK: public-s3-images
    FILESYSTEM_PRIVATE_IMAGES_DISK: private-s3-images
    QUEUE_CONNECTION: sqs
    SQS_QUEUE:
      Ref: AlertQueue
    AWS_BUCKET:
      Ref: PublicAssets
    AWS_PRIVATE_BUCKET:
      Ref: PrivateAssets
  iamRoleStatements:
     # Allows our code to interact with SQS
    - Effect: Allow
      Action: [sqs:SendMessage, sqs:DeleteMessage]
      Resource:
        Fn::GetAtt: [ AlertQueue, Arn ]

    # Allow Lambda to read and write files in the S3 buckets
    - Effect: Allow
      Action: s3:*
      Resource:
        - Fn::GetAtt: [PublicAssets, Arn] # the public storage bucket
        - Fn::Join: ["", [Fn::GetAtt: [PublicAssets, Arn], "/*"]] # everything in the public storage bucket
        - Fn::GetAtt: [PrivateAssets, Arn] # the public storage bucket
        - Fn::Join: ["", [Fn::GetAtt: [PrivateAssets, Arn], "/*"]] # everything in the public storage bucket

package:
  # Directories to exclude from deployment
  exclude:
    - node_modules/**
    - public/storage/**
    - public/images/**
    - resources/assets/**
    - packages/kirby/**/tests
    - storage/**
    - tests/**
  include:
    - storage/oauth-private.key
    - storage/oauth-public.key

functions:
  # This function runs the Laravel website/API
  web:
    handler: public/index.php
    timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
    layers:
      - ${bref:layer.php-74-fpm}
      - ${bref:extra.imagick-php-74}
    events:
      - http: "ANY /"
      - http: "ANY /{proxy+}"
  # This function lets us run artisan commands in Lambda
  artisan:
    handler: artisan
    timeout: 120 # in seconds
    layers:
      - ${bref:layer.php-74} # PHP
      - ${bref:layer.console} # The "console" layer
      - ${bref:extra.imagick-php-74}
  worker:
    handler: worker.php
    layers:
      - ${bref:layer.php-74}
      - ${bref:extra.imagick-php-74}
    events:
      # Declares that our worker is triggered by jobs in SQS
      - sqs:
          arn: !GetAtt AlertQueue.Arn
          batchSize: 1
plugins:
  # We need to include the Bref plugin
  - ./vendor/bref/bref
  - ./vendor/bref/extra-php-extensions

resources:
  Resources:
    # The S3 bucket that stores public assets
    PublicAssets:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: shop-i-prod-public
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ["*"]
              AllowedMethods: [GET]
              AllowedOrigins: ["*"]

    # The S3 bucket that stores private files
    PrivateAssets:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: shop-i-prod-private
    # The policy that makes the bucket publicly readable
    PublicAssetsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref PublicAssets # References the bucket we defined above
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: "*" # everyone
              Action: "s3:GetObject" # to read
              Resource: !Join ["/", [!GetAtt PublicAssets.Arn, "*"]] # things in the bucket

    # The SQS queue
    AlertQueue:
      Type: AWS::SQS::Queue
      Properties:
        RedrivePolicy:
          maxReceiveCount: 3 # jobs will be retried up to 3 times
          # Failed jobs (after the retries) will be moved to the other queue for storage
          deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn

    # Failed jobs will go into that SQS queue to be stored, until a developer looks at these errors
    DeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        MessageRetentionPeriod: 1209600 # maximum retention: 14 days

    WebsiteCDN:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          # Cheapest option by default (https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_DistributionConfig.html)
          PriceClass: PriceClass_100
          # Enable http2 transfer for better performance
          HttpVersion: http2
          # Origins are where CloudFront fetches content
          Origins:
            # The website (AWS Lambda)
            - Id: Website
              DomainName:
                !Join [
                  ".",
                  [
                    !Ref ApiGatewayRestApi,
                    "execute-api",
                    !Ref AWS::Region,
                    "amazonaws.com",
                  ],
                ]
              # This is the stage
              OriginPath: "/${opt:stage, 'dev'}"
              CustomOriginConfig:
                OriginProtocolPolicy: "https-only" # API Gateway only supports HTTPS
            # The assets (S3)
            - Id: Assets
              DomainName: !GetAtt PublicAssets.RegionalDomainName
              S3OriginConfig: {} # this key is required to tell CloudFront that this is an S3 origin, even though nothing is configured
          # The default behavior is to send everything to AWS Lambda
          DefaultCacheBehavior:
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
            TargetOriginId: Website # the PHP application
            # Disable caching for the PHP application https://aws.amazon.com/premiumsupport/knowledge-center/prevent-cloudfront-from-caching-files/
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-forwardedvalues.html
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: all # Forward cookies to use them in PHP
              # We must *not* forward the `Host` header else it messes up API Gateway
              Headers:
                - "Accept"
                - "Accept-Language"
                - "Origin"
                - "Referer"
                - "Authorization"
                - "Referer"
                - "User-Agent"
            ViewerProtocolPolicy: redirect-to-https
          CacheBehaviors:
            # Assets will be served under the `/assets/` prefix
            - PathPattern: "css/*"
              TargetOriginId: Assets # the static files on S3
              AllowedMethods: [GET, HEAD]
              ForwardedValues:
                # No need for all that with assets
                QueryString: "false"
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
              Compress: true # Serve files with gzip for browsers that support it (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html)
            - PathPattern: "js/*"
              TargetOriginId: Assets # the static files on S3
              AllowedMethods: [GET, HEAD]
              ForwardedValues:
                # No need for all that with assets
                QueryString: "false"
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
              Compress: true
            - PathPattern: "images/*"
              TargetOriginId: Assets # the static files on S3
              AllowedMethods: [GET, HEAD]
              ForwardedValues:
                # No need for all that with assets
                QueryString: "false"
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
              Compress: true
            - PathPattern: "svg/*"
              TargetOriginId: Assets # the static files on S3
              AllowedMethods: [GET, HEAD]
              ForwardedValues:
                # No need for all that with assets
                QueryString: "false"
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
              Compress: true
            - PathPattern: "vendor/*"
              TargetOriginId: Assets # the static files on S3
              AllowedMethods: [GET, HEAD]
              ForwardedValues:
                # No need for all that with assets
                QueryString: "false"
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
              Compress: true
          CustomErrorResponses:
            # Do not cache HTTP errors
            - ErrorCode: 500
              ErrorCachingMinTTL: 0
            - ErrorCode: 504
              ErrorCachingMinTTL: 0
